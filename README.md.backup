# Orcha-1: FoodTec Integration System# Orcha-1



## OverviewMCP → Proxy → API



A Model Context Protocol (MCP) based system for integrating with FoodTec's ordering API. The architecture follows a three-layer design:## Install

```

```cd MCP && npm install && npm run build

UI (Express/TypeScript) → MCP Server (TypeScript) → Proxy (FastAPI/Python) → P2A (Python) → FoodTec APIcd P2A && pip install -r requirements.txt  

```cd proxy && pip install -r requirements.txt

```

## Architecture

## Start Servers

### Components```

cd proxy && python main.py

1. **UI Layer** (`MCP/ui/`)```

   - Express server serving web interface```

   - Interactive menu browsing and order placementcd MCP && node dist/index.js

   - Real-time validation and acceptance flow```



2. **MCP Server** (`MCP/`)## UI Interface (MCPUI)

   - JSON-RPC endpoint for tool invocation

   - Three main tools:The project includes a web-based UI for interacting with the MCP server.

     - `foodtec.export_menu` - Retrieve menu data

     - `foodtec.validate_order` - Validate order and get final price### Install & Run UI

     - `foodtec.accept_order` - Submit order to FoodTec```

cd MCP/ui && npm install

3. **Proxy Layer** (`proxy/`)cd MCP/ui && npx ts-node --esm server.ts

   - FastAPI server routing MCP requests```

   - Handles vendor-specific translation

   - Price validation and invariant enforcementThe UI will be available at http://localhost:3001



4. **P2A Layer** (`P2A/`)**Note:** The UI may crash when requesting menu export from MCP due to lack of caching at this stage. This will be addressed in a future update.

   - Python client for FoodTec API

   - Menu and order service abstractions### Features

   - API v1 and v2 format handling- View and export menu data

- Validate orders

## Getting Started- Accept orders



### Prerequisites## Automation Component



- Python 3.11+The project includes an LLM-powered automation component for processing natural language orders.

- Node.js 18+

- FoodTec API credentials### Install & Run Automation

```

### Installationcd automation && npm install

cd automation && cp .env.example .env

1. **Clone and setup Python environment:**# Add your OpenAI API key to the .env file

```bash```

cd proxy

python -m venv .venv### Features

.venv\Scripts\activate  # Windows- Natural language order processing

pip install -r requirements.txt- Integration with UI

```- LLM-powered order extraction

- Automated order workflow

2. **Setup P2A dependencies:**

```bashSee `automation/README.md` for more details.

cd P2A

pip install -r requirements.txt## Test Entire Loop

``````

cd tests && .\run_all.ps1

3. **Setup MCP server:**
```bash
cd MCP
npm install
npm run build
```

4. **Setup UI:**
```bash
cd MCP/ui
npm install
```

5. **Configure environment:**
```bash
# Copy .env.template to .env and fill in FoodTec credentials
cp .env.template .env
```

### Running the System

**Terminal 1 - Proxy Server:**
```bash
cd proxy
python main.py
# Runs on http://localhost:8080
```

**Terminal 2 - MCP Server:**
```bash
cd MCP
node dist/index.js
# Runs on http://localhost:9090
```

**Terminal 3 - UI Server:**
```bash
cd MCP/ui
npx ts-node --esm server.ts
# Runs on http://localhost:3001
```

**Access the UI:**
Open http://localhost:3001 in your browser

## Usage Flow

1. **Export Menu** - Click to load FoodTec menu (38 categories)
2. **Select Item** - Browse categories, choose item and size
3. **Validate Order** - Validates with FoodTec, returns final price with tax
4. **Accept Order** - Submits order to FoodTec, returns order confirmation

## Key Concepts

### Price Handling

The system handles two price types:
- **Menu Price** (`menuPrice`): Item price without tax (e.g., $6.99)
- **Canonical Price** (`canonicalPrice`): Final price with tax (e.g., $7.41)

**Critical:** Accept always uses prices from validation - never re-validates to avoid tax-on-tax issues.

### Invariants Enforced

1. `canonicalPrice >= menuPrice` (tax included)
2. Phone format: `XXX-XXX-XXXX`
3. No re-validation on accept
4. Idempotency via `externalRef` and `idem` fields

## Testing

### Run Regression Test
```powershell
powershell -ExecutionPolicy Bypass -File .\scripts\test-accept.ps1
```

Expected output:
```
=== Testing Order Acceptance Flow ===
[1/3] Validating order...
Validation successful: canonicalPrice = 7.41
[2/3] Accepting order...
Acceptance successful with canonicalPrice=7.41
[3/3] Verifying order data...
=== All Tests Passed ===
```

### Run Invariant Tests
```bash
cd MCP/MCP_tests
npm install --save-dev @types/node  # First time only
npx ts-node test-accept-invariants.ts
```

## Project Structure

```
orcha-1/
├── MCP/                      # MCP Server & UI
│   ├── src/                  # TypeScript source
│   │   ├── tools/            # MCP tool definitions
│   │   ├── proxy/            # Proxy client
│   │   └── index.ts          # Main server
│   ├── ui/                   # Web UI
│   │   ├── public/           # Frontend (app.js, styles)
│   │   ├── views/            # Handlebars templates
│   │   └── server.ts         # Express server
│   └── MCP_tests/            # Test files
├── proxy/                    # FastAPI proxy server
│   ├── handlers.py           # JSON-RPC handlers
│   └── main.py               # FastAPI app
├── P2A/                      # FoodTec API client
│   ├── core/                 # Service layer
│   │   ├── menu_service.py
│   │   ├── order_service.py
│   │   └── api_client.py
│   └── models/               # Data models
├── scripts/                  # Test scripts
│   └── test-accept.ps1       # Regression test
└── docs/                     # Documentation
    ├── ACCEPTANCE_FIX.md     # Price handling fix
    ├── VENDOR_AGNOSTIC_API.md # Future architecture
    ├── HARDENING_CHECKLIST.md # Implementation tracking
    └── STEP_BY_STEP_SUMMARY.md # Complete summary
```

## Documentation

- **[ACCEPTANCE_FIX.md](docs/ACCEPTANCE_FIX.md)** - Detailed explanation of the menuPrice/canonicalPrice fix
- **[VENDOR_AGNOSTIC_API.md](docs/VENDOR_AGNOSTIC_API.md)** - Planned vendor-agnostic refactor
- **[HARDENING_CHECKLIST.md](docs/HARDENING_CHECKLIST.md)** - Security and robustness checklist
- **[STEP_BY_STEP_SUMMARY.md](docs/STEP_BY_STEP_SUMMARY.md)** - Complete implementation summary

## Known Limitations

### Vendor Coupling
Currently, the system is tightly coupled to FoodTec:
- Tool names include `foodtec.*` prefix
- "Canonical price" is FoodTec terminology
- Two-step validate→accept flow is FoodTec-specific

**Future:** See `docs/VENDOR_AGNOSTIC_API.md` for planned refactor to support multiple vendors (Toast, Square, etc.)

## Troubleshooting

### Accept Order Fails
- Ensure validation was run first
- Check phone format is `XXX-XXX-XXXX`
- Verify item name matches menu exactly

### Menu Not Loading
- Check proxy server is running on port 8080
- Verify FoodTec credentials in `.env`
- Check network connectivity

### Price Mismatch Errors
- Never modify prices after validation
- Always send both `menuPrice` and `canonicalPrice` to accept
- If prices change, re-validate before accepting

## Contributing

When making changes:
1. Run regression tests
2. Update documentation
3. Ensure all services start without errors
4. Test full UI flow (Export → Validate → Accept)

## License

Internal use only.

---

**Last Updated:** October 2, 2025  
**Status:** Production Ready  
**Version:** 1.0.0
